Header:
    version: 142
ImportedPackages:
- "~res:/UI/Screens3/Lobby/Common/Blur.yaml"
Prototypes:
-   class: "UIControl"
    name: "BattleResultPopup"
    size: [1377.000000, 824.000000]
    input: true
    components:
        UIAnimationComponent:
            animations: "_INIT,~res:/UI/Screens3/Common/BattleResultPopupInit.animation;"
        Anchor:
            leftAnchorEnabled: true
            rightAnchorEnabled: true
            topAnchorEnabled: true
            bottomAnchorEnabled: true
        UILayoutEventComponent:
            sizeChangedEvent: "SIZE_CHANGE_EVENT"
            sizeChangedEventData: "_size.Y"
        ModalInput: {}
        UIInputEventComponent:
            blockDuplicatedEvents: true
        UIDataParamsComponent:
            params:
            - ["FinishReason", "resultDescription", "FinishReason.UNKNOWN", "FinishReason.EXTERMINATION"]
            - ["BattleResult", "battleResult", "BattleResult.WIN", "BattleResult.LOSE"]
            - ["bool", "isTutorial", "false", "false"]
            - ["bool", "isDescriptionVisible", "true", "true"]
        UIDataLocalVarsComponent:
            data:
            - ["string", "firstPhaseEffectPath", "when battleResult == BattleResult.WIN -> \"~res:/3d/FX/UI/WinningScene/Lines1stPhase.sc2\", battleResult == BattleResult.LOSE -> \"~res:/3d/FX/UI/LooseScene/Lines1stPhase.sc2\", \"~res:/3d/FX/UI/DrawScene/Lines1stPhase.sc2\""]
            - ["string", "secondPhaseEffectPath", "when battleResult == BattleResult.WIN -> \"~res:/3d/FX/UI/WinningScene/Lines2ndPhase.sc2\", battleResult == BattleResult.LOSE -> \"~res:/3d/FX/UI/LooseScene/Lines2ndPhase.sc2\", \"~res:/3d/FX/UI/DrawScene/Lines2ndPhase.sc2\""]
            - ["bool", "battleBlur", "false"]
            - ["float", "screenHeight", "768.000000"]
            - ["float", "defaultFxYSize", "768.000000"]
            - ["bool", "enableBlur", "false"]
        UIDataLocalBindingsComponent:
            data:
            - ["string", "finishReasonStr", "when resultDescription == FinishReason.EXTERMINATION and battleResult == BattleResult.WIN -> \"#battle_results:Reason_extermination_Win\", resultDescription == FinishReason.EXTERMINATION and battleResult == BattleResult.LOSE -> \"#battle_results:Reason_extermination_Lose\", resultDescription == FinishReason.EXTERMINATION and battleResult == BattleResult.TIE -> \"#battle_results:Reason_extermination_Tie\", resultDescription == FinishReason.BASE and battleResult == BattleResult.WIN -> \"#battle_results:Reason_base_Win\", resultDescription == FinishReason.BASE and battleResult == BattleResult.LOSE -> \"#battle_results:Reason_base_Lose\", resultDescription == FinishReason.BASE and battleResult == BattleResult.TIE -> \"#battle_results:Reason_base_Tie\", resultDescription == FinishReason.TIMEOUT -> \"#battle_results:Reason_timeout\", resultDescription == FinishReason.FAILURE -> \"#battle_results:Reason_failure\", resultDescription == FinishReason.TECHNICAL -> \"#battle_results:Reason_technical\", resultDescription == FinishReason.WIN_POINTS and battleResult == BattleResult.WIN -> \"#battle_results:Reason_MaxScore_Win\", resultDescription == FinishReason.WIN_POINTS and battleResult == BattleResult.LOSE -> \"#battle_results:Reason_MaxScore_Lose\", resultDescription == FinishReason.WIN_POINTS and battleResult == BattleResult.TIE -> \"#battle_results:Reason_MaxScore_Tie\", resultDescription == FinishReason.SUPERMACY_OUT_OF_TIME and battleResult == BattleResult.WIN -> \"#battle_results:Reason_BiggerScore_Win\", resultDescription == FinishReason.SUPERMACY_OUT_OF_TIME and battleResult == BattleResult.LOSE -> \"#battle_results:Reason_BiggerScore_Lose\", resultDescription == FinishReason.SUPERMACY_OUT_OF_TIME and battleResult == BattleResult.TIE -> \"#battle_results:Reason_BiggerScore_Tie\", \"\""]
            - ["float", "yFxScale", "screenHeight / defaultFxYSize"]
        UIActionComponent:
            actionsPath: "~res:/UI/Screens3/Common/BattleResultPopup.actions"
        UIDataOnEventComponent0:
            eventName: "SIZE_CHANGE_EVENT"
            modelFieldExpression: "screenHeight"
            dataExpression: "_event"
        UIDataOnEventComponent1:
            eventName: "EnableBlur"
            modelFieldExpression: "enableBlur"
            dataExpression: "true"
    children:
    -   class: "UIControl"
        name: "SceneBlur"
        size: [200.000000, 100.000000]
        input: false
        components:
            UIOpacityComponent: {}
            SizePolicy:
                horizontalPolicy: "PercentOfParent"
                verticalPolicy: "PercentOfParent"
        children:
        -   prototype: "Blur/Blur"
            name: "Blur"
            components:
                Background:
                    drawType: "DRAW_SCALE_TO_RECT"
                UIOpacityComponent: {}
                UIPostProcessTextureComponent0:
                    scale: 0.250000
                    needDepth: true
                    renderRequestingType: "ON_SIZE_CHANGED"
                UIPostProcessTextureComponent1:
                    scale: 0.250000
                    renderRequestingType: "ON_SIZE_CHANGED"
                UIPostProcessTextureComponent2:
                    scale: 0.250000
                    renderRequestingType: "ON_SIZE_CHANGED"
                Anchor:
                    hCenterAnchorEnabled: true
                    vCenterAnchorEnabled: true
        -   class: "UIControl"
            name: "Fade"
            input: false
            classes: "black-bg"
            components:
                Background: {}
                UIOpacityComponent:
                    opacity: 0.600000
                Anchor:
                    hCenterAnchorEnabled: true
                    vCenterAnchorEnabled: true
                SizePolicy:
                    horizontalPolicy: "PercentOfParent"
                    verticalPolicy: "PercentOfParent"
                StyleSheet:
                    styles: "~res:/UI/Screens3/Color.style.yaml"
    -   class: "UIControl"
        name: "HangarBlur"
        size: [32.000000, 32.000000]
        input: false
        components:
            Background:
                drawType: "DRAW_SCALE_TO_RECT"
            UIOpacityComponent: {}
            SizePolicy:
                horizontalPolicy: "PercentOfParent"
                verticalPolicy: "PercentOfParent"
            UIPostProcessCacheInputComponent: {}
        bindings:
        - ["visible", "enableBlur"]
        - ["UIPostProcessCacheInputComponent.cachedFileId", "when enableBlur -> \"HangarBlur\", \"\""]
    -   class: "UIControl"
        name: "Fade"
        input: false
        classes: "black-bg"
        components:
            Background: {}
            UIOpacityComponent:
                opacity: 0.600000
            SizePolicy:
                horizontalPolicy: "PercentOfParent"
                verticalPolicy: "PercentOfParent"
            StyleSheet:
                styles: "~res:/UI/Screens3/Color.style.yaml"
        bindings:
        - ["visible", "enableBlur"]
    -   class: "UIControl"
        name: "LinesFX"
        size: [32.000000, 32.000000]
        input: false
        components:
            SizePolicy:
                horizontalPolicy: "FixedSize"
                horizontalValue: 1364.000000
                verticalPolicy: "PercentOfParent"
            ScalePolicy:
                horizontalFormula: "parentSize.X / size.X"
        children:
        -   class: "UIParticles"
            name: "1stPhase"
            position: [682.000000, 306.000000]
            size: [32.000000, 32.000000]
            scale: [3.000000, 2.000000]
            pivot: [0.500000, 0.500000]
            angle: 0.000000
            input: false
            autoStart: false
            bindings:
            - ["effectPath", "firstPhaseEffectPath"]
        -   class: "UIParticles"
            name: "2ndPhase"
            position: [682.000000, 306.000000]
            size: [32.000000, 32.000000]
            scale: [3.400000, 2.000000]
            pivot: [0.500000, 0.500000]
            angle: 0.000000
            input: false
            autoStart: false
            bindings:
            - ["effectPath", "secondPhaseEffectPath"]
    -   class: "UIControl"
        name: "GlowFX"
        size: [32.000000, 32.000000]
        input: false
        components:
            SizePolicy:
                horizontalPolicy: "FixedSize"
                horizontalValue: 1364.000000
                verticalPolicy: "FixedSize"
                verticalValue: 768.000000
            ScalePolicy:
                horizontalFormula: "parentSize.X / size.X"
                verticalFormula: "parentSize.Y / size.Y"
        children:
        -   class: "UIParticles"
            name: "Glow"
            position: [682.000000, 131.000000]
            scale: [4.000000, 4.000000]
            pivot: [0.500000, 0.500000]
            angle: 0.000000
            input: false
            effectPath: "~res:/3d/FX/UI/WinningScene/Glow.sc2"
            autoStart: false
            components:
                Background:
                    color: [1.000000, 0.101961, 0.113725, 1.000000]
                Anchor:
                    topAnchorEnabled: true
                IgnoreLayout: {}
            bindings:
            - ["Anchor.topAnchor", "300 / yFxScale"]
    -   class: "UIControl"
        name: "ContentWrapper"
        position: [0.000000, 160.000000]
        size: [2560.000000, 172.000000]
        pivot: [0.500000, 0.500000]
        input: false
        components:
            Anchor:
                hCenterAnchorEnabled: true
                topAnchorEnabled: true
                topAnchor: 248.000000
            SizePolicy:
                horizontalPolicy: "PercentOfLastChild"
                verticalPolicy: "PercentOfLastChild"
        children:
        -   class: "UIControl"
            name: "Content"
            position: [0.000000, 0.000000]
            size: [227.000000, 120.000000]
            input: false
            components:
                UIOpacityComponent: {}
                LinearLayout:
                    orientation: "TopDown"
                SizePolicy:
                    horizontalPolicy: "PercentOfMaxChild"
                    verticalPolicy: "PercentOfChildrenSum"
            children:
            -   class: "UIControl"
                name: "Label"
                position: [113.500000, 44.000000]
                size: [32.000000, 32.000000]
                pivot: [0.500000, 0.500000]
                input: false
                classes: "fs-70 white-wild-sand-text bold"
                components:
                    UIOpacityComponent: {}
                    UITextComponent:
                        fontSize: 70.000000
                    Anchor:
                        hCenterAnchorEnabled: true
                    SizePolicy:
                        horizontalPolicy: "PercentOfContent"
                        verticalPolicy: "PercentOfContent"
                    UIIdentifierComponent:
                        id: "battle_results_label"
                    StyleSheet:
                        styles: "~res:/UI/Screens3/OldFont.style.yaml"
                bindings:
                - ["UITextComponent.text", "when battleResult == BattleResult.WIN -> localize(\"NEWS_NOTIFICATION_BATTLE_WIN\"), battleResult == BattleResult.LOSE -> localize(\"NEWS_NOTIFICATION_BATTLE_DEFEAT\"), localize(\"NEWS_NOTIFICATION_BATTLE_DRAW\")"]
            -   class: "UIControl"
                name: "Desc"
                position: [113.500000, 104.000000]
                size: [32.000000, 32.000000]
                pivot: [0.500000, 0.500000]
                input: false
                classes: "fs-25 white-wild-sand-text bold"
                components:
                    UIOpacityComponent: {}
                    UITextComponent:
                        fontSize: 25.000000
                    Anchor:
                        hCenterAnchorEnabled: true
                    SizePolicy:
                        horizontalPolicy: "PercentOfContent"
                        verticalPolicy: "PercentOfContent"
                    StyleSheet:
                        styles: "~res:/UI/Screens3/OldFont.style.yaml"
                bindings:
                - ["visible", "isDescriptionVisible"]
                - ["UITextComponent.text", "localize(finishReasonStr)"]
