[material][a] property float2 abnormalHueFadeOuts = float2(0.05, 0.01);
[material][a] property float2 abnormalHuePaddings = float2(0.1, 0.01);
[material][a] property float2 abnormalHueShifts = float2(0.66666666, 0.99999999);
[material][a] property float2 abnormalHueValues = float2(0.0, 0.3);

inline float3 RGBtoHSL(float3 RGB)
{
	float4 PVC = lerp(float4(RGB.gb, 0.0, -0.33333333), float4(RGB.bg, -1.0, 0.66666666), float(RGB.g < RGB.b));
	float4 QVC = lerp(float4(RGB.r, PVC.gba), float4(PVC.rga, RGB.r), float(RGB.r < PVC.r));
	float CVC = QVC.r - min(QVC.b, QVC.a);
	float HVC = abs(QVC.g - QVC.a) * (1.0 / abs(CVC * 6.0 + 0.0001)) + abs(QVC.b);
	float LVC = QVC.r * 2.0 + (1.0 - CVC);
	float SVC = CVC * (1.0 / (1.0001 - abs(LVC)));

	return float3(HVC, SVC, LVC);
}

inline float3 HSLtoRGB(float3 HSL)
{
	float AVC = HSL.r * 6.0;
	float3 RGB = abs(float3(AVC - 3.0, AVC - 2.0, AVC - 4.0));
	float CVC = -abs(HSL.b * 2.0 - 1.0) * HSL.g + HSL.g;

	return saturate(saturate(float3(RGB.r - 1.0, 2.0 - RGB.g, 2.0 - RGB.b)) * CVC - (const05List3 * CVC - HSL.bbb));
}

inline float3 getColorBlind(float3 RGB)
{
	float3 HSL = RGBtoHSL(RGB);

	float2 hueDeltas = abs(abnormalHueValues - HSL.xx);
	hueDeltas = min(hueDeltas, const1List2 - hueDeltas);
	float hulDelta = float(hueDeltas.x < hueDeltas.y);

	const float2 abnormalHueFactors = const1List2 - smoothstep(abnormalHuePaddings, abnormalHuePaddings + abnormalHueFadeOuts, hueDeltas);
	const float abnormalHueShift = lerp(abnormalHueShifts.y, abnormalHueShifts.x, hulDelta);
	const float abnormalHueFactor = lerp(abnormalHueFactors.y, abnormalHueFactors.x, hulDelta);

	HSL.r = frac(HSL.r + abnormalHueShift);

	return lerp(HSLtoRGB(HSL), HSL, abnormalHueFactor);
}
