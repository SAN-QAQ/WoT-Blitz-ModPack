float2 D_Hammersley(uint i, float numSamples)
{
	uint bits = i;
	uint a = (0xAAAA << 16) + 0xAAAA;
	uint b = (0xCCCC << 16) + 0xCCCC;
	uint c = (0xF0F0 << 16) + 0xF0F0;
	uint d = (0xFF00 << 16) + 0xFF00;
	bits = (bits << 16) | (bits >> 16);
	bits = ((bits & 0x55555555) << 1) | ((bits & a) >> 1);
	bits = ((bits & 0x33333333) << 2) | ((bits & b) >> 2);
	bits = ((bits & 0x0F0F0F0F) << 4) | ((bits & c) >> 4);
	bits = ((bits & 0x00FF00FF) << 8) | ((bits & d) >> 8);

	return float2(float(i) * (1.0 / numSamples), float(bits) * 2.3283064365386963e-10);
}

float2 D_HammersleyNoBitOps(uint n, uint N)
{
	float invBase = 0.5;
	float denom = 1.0;
	float result = 0.0;

	if (float(n) > 0.0)
	{
		for (uint i = 0; i < 32; ++i)
		{
			denom = fmod(float(n), 2.0);
			result += denom * invBase;
			invBase *= 0.5;
			n = uint(float(n) * 0.5);
		}
	}

	return float2(float(n) * (1.0 / float(N)), result);
}

float D_GGX(float NdotH, float roughness)
{
	float a = (NdotH * roughness - NdotH) * NdotH + 1.0;

	return roughness * _INVERSE_PI * (1.0 / (a * a +0.0001));
}

float G_GGX(float NdotV, float NdotL, float roughness)
{
	roughness *= roughness * 0.5; //remapping

	float GGXV = NdotV * (1.0 / lerp(NdotV, 1.0, roughness));
	float GGXL = NdotL * (1.0 / lerp(NdotL, 1.0, roughness));

	return GGXL * GGXV;
}

float3 I_GGX(float2 X, float roughness, float3 N)
{
	roughness *= roughness * roughness * roughness; // remapping

	float phi = _PI_20 * X.x;
	float invX = 1.0 / (X.y * roughness + (1.0 - X.y));
	float cosTheta = abs(sqrt(-invX * X.y + invX));
	float sinTheta = sqrt(-cosTheta * cosTheta + 1.0);

	float3 U = lerp(float3(1.0, const0List2), float3(const0List2, 1.0), 1.0 - step(1.0, abs(N.z)));
	float3 tangentX = normalize(cross(U, N));
	float3 tangentY = cross(N, tangentX);

	return ((tangentX * cos(phi)) + (tangentY * sin(phi))) * sinTheta + (N * cosTheta);
}

float2 getRandom(float f, int NUM_SAMPLES)
{
	f *= 1.0 / float(NUM_SAMPLES);

	return float2(f, frac(cos(f * 23.14069263277926) * 12345.6789));
}
