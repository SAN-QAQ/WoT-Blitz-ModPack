#if USE_VERTEX_DISPLACEMENT
	uniform sampler2D vertexDisplacementMap;
#endif

[auto][a] property float globalTime;
[auto][a] property float4x4 worldMatrix;
[auto][a] property float4x4 worldViewProjMatrix;

#if !DRAW_DEPTH_ONLY
	[auto][a] property float3 cameraPosition;
	[auto][a] property float4x4 worldViewMatrix;
#endif

#if SOFT_SKINNING || HARD_SKINNING
	[auto][jpos] property float4 jointPositions[32] : "bigarray";
	[auto][jrot] property float4 jointQuaternions[32] : "bigarray";
#endif

#if !DRAW_DEPTH_ONLY && ALBEDO_TRANSFORM
	[material][a] property float4 decalAtlasBoxAlbedo = float4(const0List2, const1List2);
	[material][a] property widget textureTransform float4x4 Tex0Transform;
#endif

#if MATERIAL_DETAIL || TILED_DECAL_MASK
	[material][a] property float2 decalTileCoordScale = const1List2;
	[material][a] property float2 detailTileCoordScale = const1List2;

	#if TILED_DECAL_TRANSFORM
		#if HARD_SKINNING
			[auto][ttc] property widget textureTransform float4 jointTextureTransforms[64] : "bigarray";
		#elif !SOFT_SKINNING
			[material][a] property widget textureTransform float4x4 tiledDecalTextureTransform;
		#endif
	#endif
#endif

#if USE_VERTEX_DISPLACEMENT
	[material][a] property float vertexDisplacementScale = 0.0;
	[material][a] property float2 vertexDisplacementMapUVSpeed = const0List2;
	[material][a] property float4 vertexDisplacementMapUVOffsetScale = float4(const0List2, const1List2);
#endif

#if VERTEX_VERTICAL_OFFSET
	[material][a] property float verticalOffset = 0.0;
#elif WIND_ANIMATION
	[material][a] property float2 windOscillationParams;
#endif

#if SOFT_SKINNING
	__forceinline float3 softSkinnedPosition(float3 position, float4 indices, float4 weights)
	{
		float4 skinnedPosition = const0List4;

		[unroll]
		for (int i = 0; i < SOFT_SKINNING; ++i)
		{
			int jIndex = int(indices.x);

			float4 jP = jointPositions[jIndex];
			float4 jQ = jointQuaternions[jIndex];
			float3 tmp = cross(jQ.xyz, position) * 2.0;

			skinnedPosition += float4((tmp * jQ.w + (position + cross(jQ.xyz, tmp))) * jP.w + jP.xyz, 1.0) * weights.x;

			indices = indices.yzwx;
			weights = weights.yzwx;
		}

		return skinnedPosition.xyz * (1.0 / skinnedPosition.w);
	}

	__forceinline float3 softSkinnedNormal(float3 n, float4 indices, float4 weights)
	{
		float3 finalN = const0List3;

		[unroll]
		for (int i = 0; i < SOFT_SKINNING; ++i)
		{
			float4 jQ = jointQuaternions[int(indices.x)];
			float3 tmp = cross(jQ.xyz, n) * 2.0;

			finalN += (tmp * jQ.w + cross(jQ.xyz, tmp)) * weights.x + n;

			indices = indices.yzwx;
			weights = weights.yzwx;
		}

		return normalize(finalN);
	}

	__forceinline float3x3 softSkinnedTBN(float3 t, float3 b, float3 n, float4 indices, float4 weights)
	{
		float3 finalT = const0List3;
		float3 finalB = const0List3;
		float3 finalN = const0List3;

		[unroll]
		for (int i = 0; i < SOFT_SKINNING; ++i)
		{
			float4 jQ = jointQuaternions[int(indices.x)];
			float3 tmp = cross(jQ.xyz, t) * 2.0;
			float3 bmp = cross(jQ.xyz, b) * 2.0;
			float3 nmp = cross(jQ.xyz, n) * 2.0;

			finalT += (tmp * jQ.w + cross(jQ.xyz, tmp)) * weights.x + t;
			finalB += (bmp * jQ.w + cross(jQ.xyz, bmp)) * weights.x + b;
			finalN += (nmp * jQ.w + cross(jQ.xyz, nmp)) * weights.x + n;

			indices = indices.yzwx;
			weights = weights.yzwx;
		}

		return float3x3(normalize(finalT), normalize(finalB), normalize(finalN));
	}
#elif HARD_SKINNING
	__forceinline float3 hardSkinnedPosition(float3 position, float index)
	{
		int jIndex = int(index);

		float4 jP = jointPositions[jIndex];
		float4 jQ = jointQuaternions[jIndex];
		float3 tmp = cross(jQ.xyz, position) * 2.0;

		return (tmp * jQ.w + (position + cross(jQ.xyz, tmp))) * jP.w + jP.xyz;
	}

	__forceinline float3 hardSkinnedNormal(float3 n, float index)
	{
		float4 jQ = jointQuaternions[int(index)];
		float3 tmp = cross(jQ.xyz, n) * 2.0;

		return tmp * jQ.w + (n + cross(jQ.xyz, tmp));
	}

	__forceinline float3x3 hardSkinnedTBN(float3 t, float3 b, float3 n, float index)
	{
		float4 jQ = jointQuaternions[int(index)];
		float3 tmp = cross(jQ.xyz, t) * 2.0;
		float3 bmp = cross(jQ.xyz, b) * 2.0;
		float3 nmp = cross(jQ.xyz, n) * 2.0;

		return float3x3(tmp * jQ.w + (t + cross(jQ.xyz, tmp)), bmp * jQ.w + (b + cross(jQ.xyz, bmp)), nmp * jQ.w + (n + cross(jQ.xyz, nmp)));
	}
#endif

#if WAVE_ANIMATION
	inline float3 wave(float3 pos, float2 uv, float time)
	{
		float sinOff = dot(pos, const1List3);
		float3 cosOff = cos(float3(time * 4.35 + sinOff, time * 9.36 + sinOff, time * 6.6 + sinOff));
		float2 fxy = float2(uv.x * 0.5, -uv.x * uv.y);

		return float3(cosOff.x * fxy.x + pos.x, cosOff.y * fxy.x + (fxy.y * 0.9 + pos.y), cosOff.z * fxy.x + pos.z);
	}
#endif
