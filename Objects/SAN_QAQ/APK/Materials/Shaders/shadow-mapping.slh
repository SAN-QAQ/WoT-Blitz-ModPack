uniform sampler2DArrayShadow dynamicShadowMap;

#if SHADOW_PCF > 0
	uniform sampler2D blueNoise64x64;

	[auto][a] property float2 viewportOffset;
	[auto][a] property float2 viewportSize;
#endif

[auto][a] property float shadowLitNormalScale;
[auto][a] property float shadowNormalSlopeOffset;
[auto][a] property float2 shadowCutoffSlope;
[auto][a] property float2 shadowMapSize;
[auto][a] property float3 shadowLitDiffuseSpecAmbientMult;
[auto][a] property float4 shadowBlendCascadesOut;
[auto][a] property float4 shadowConstantDepthBias;
[auto][a] property float4 shadowSlopeDepthBias;
[auto][a] property float4 shadowFilterRadius;
[auto][a] property float4 shadowLMGateFactor;
[auto][a] property float4 shadowMapShadowColor;
[auto][a] property float4x4 shadowMapProjectionOffset;
[auto][a] property float4x4 shadowMapProjectionScale;
[auto][a] property float4x4 shadowViewMatrix;

__forceinline float blendCascades(float3 projPos, float3 blendSize)
{
	float3 s = max(const0List3, abs(projPos - const05List3) + blendSize - const05List3) * (1.0 / blendSize);

	return max(max(s.x, s.y), s.z);
}

inline float3 getShadow(float3 worldPos, float2 texCoord, float NdotL)
{
	#if SHADOW_PCF > 0
		const float4 magicCof[4];
		magicCof[0] = float4(0.125, 0.0015, -0.94201624, -0.39906216);
		magicCof[1] = float4(0.375, 0.0035, 0.94558609, -0.76890725);
		magicCof[2] = float4(0.725, 0.0075, -0.094184101, -0.9293887);
		magicCof[3] = float4(0.975, 0.0095, 0.34495938, 0.2938776);
	#else
		const float2 magicCof[3];
		magicCof[0] = float2(0.25, 0.025);
		magicCof[1] = float2(0.5, 0.05);
		magicCof[2] = float2(1.0, 0.1);
	#endif

	float3 projPos[3];
	float3 shadowPos = mul3Fast1(worldPos, shadowViewMatrix);
	float3 shadowVec = const0List3;
	float3 shadowInf = const1List3;
	float4 constantBias = shadowConstantDepthBias;
	float4 slopeBias = shadowSlopeDepthBias * NdotL;
	float4x4 projScale = shadowMapProjectionScale;
	float4x4 projOffset = shadowMapProjectionOffset;

	projPos[0] = shadowPos;
	projPos[0].z += constantBias[0] * magicCof[0].x;
	projPos[0].z += slopeBias[0] * magicCof[0].y;
	projPos[0] = projPos[0] * projScale[0].xyz + projOffset[0].xyz;
	shadowVec[0] = tex2DarrayCmp(dynamicShadowMap, projPos[0].xy, 0.0, projPos[0].z);

	#if SHADOW_CASCADES_COUNT > 1;
		projPos[1] = shadowPos;
		projPos[1].z += constantBias[1] * magicCof[1].x;
		projPos[1].z += slopeBias[1] * magicCof[1].y;
		projPos[1] = projPos[1] * projScale[1].xyz + projOffset[1].xyz;
		shadowVec[1] = tex2DarrayCmp(dynamicShadowMap, projPos[1].xy, 1.0, projPos[1].z);
	#endif

	#if SHADOW_CASCADES_COUNT > 2
		projPos[2] = shadowPos;
		projPos[2].z += constantBias[2] * magicCof[2].x;
		projPos[2].z += slopeBias[2] * magicCof[2].y;
		projPos[2] = projPos[2] * projScale[2].xyz + projOffset[2].xyz;
		shadowVec[2] = tex2DarrayCmp(dynamicShadowMap, projPos[2].xy, 2.0, projPos[2].z);
	#endif

	float2 cascadeFX = float2(-1.0, 0.0);

	#if SHADOW_CASCADES_COUNT > 2
		cascadeFX.x = lerp(cascadeFX.x, 2.0, float(all(equal(saturate(projPos[2]), projPos[2]))));
	#endif

	#if SHADOW_CASCADES_COUNT > 1
		cascadeFX.x = lerp(cascadeFX.x, 1.0, float(all(equal(saturate(projPos[1]), projPos[1]))));
	#endif

	cascadeFX.x = lerp(cascadeFX.x, 0.0, float(all(equal(saturate(projPos[0]), projPos[0]))));
	cascadeFX.y = min(cascadeFX.x + 1.0, float(SHADOW_CASCADES_COUNT) - 1.0);

	float3 cascadeF32 = float3(cascadeFX.x, cascadeFX.y, cascadeFX.x - cascadeFX.y + 1.0);
	int cascade = int(cascadeF32.x);
	int nextCascade = int(cascadeF32.y);
	int lastCascade = int(cascadeF32.z);

	if (cascadeFX.x >= 0.0)
	{
		float3 cscBlend = const0List3;

		cscBlend[0] = blendCascades(projPos[0], abs(projScale[0].xyz) * shadowBlendCascadesOut[lastCascade]);

		#if SHADOW_CASCADES_COUNT > 1
			cscBlend[1] = blendCascades(projPos[1], abs(projScale[1].xyz) * shadowBlendCascadesOut[lastCascade]);
		#endif

		#if SHADOW_CASCADES_COUNT > 2
			cscBlend[2] = blendCascades(projPos[2], abs(projScale[2].xyz) * shadowBlendCascadesOut[lastCascade]);
		#endif

		shadowInf.y = cscBlend[cascade] * cascadeF32.z;

		#if SHADOW_PCF > 0
			float4 rotationKernel = tex2Dlod(blueNoise64x64, (texCoord * 0.0078125 + float2(0.0078125, 0.0078125)) * viewportSize + viewportOffset, 0.0);

			float pcfCascadeF32 = lerp(cascadeFX.x, cascadeFX.y, float(cscBlend[cascade] > rotationKernel.z));
			int pcfCascade = int(pcfCascadeF32);

			float2 theta = (rotationKernel.xy * 2.0 - const1List2) * (shadowFilterRadius[pcfCascade] * (1.0 / shadowMapSize.x));

			float3 pcfProjPos = shadowPos;
			pcfProjPos.z += constantBias[pcfCascade] * magicCof[pcfCascade].x;
			pcfProjPos.z += slopeBias[pcfCascade] * magicCof[pcfCascade].y;
			pcfProjPos = pcfProjPos * projScale[pcfCascade].xyz + projOffset[pcfCascade].xyz;
			float pcfShadowVec = float(0.0);
			float2 pcfCoord;

			[unroll]
			for (int i = 0; i < 4; ++i)
			{
				pcfCoord = pcfProjPos.xy;
				pcfCoord += rotate(magicCof[i].zw, theta);
				pcfShadowVec += tex2DarrayCmp(dynamicShadowMap, pcfCoord, pcfCascadeF32, pcfProjPos.z);
			}

			shadowInf.z = pcfShadowVec * 0.25;
		#else
			shadowInf.z = lerp(shadowVec[cascade], shadowVec[nextCascade], cscBlend[cascade]);
		#endif
	}

	shadowInf.x = saturate(shadowInf.z * saturate((shadowCutoffSlope.y - NdotL) * (1.0 / (shadowCutoffSlope.y - shadowCutoffSlope.x))) + shadowInf.y);
	shadowInf.y = 1.0 - shadowInf.y;

	return shadowInf;
}
