float3 localPos;

#if WIND_ANIMATION
	localPos = float3(windOscillationParams * (input.flexibility * 2.25) + input.localPos.xy, input.localPos.z);
#elif WAVE_ANIMATION
	localPos = wave(input.localPos.xyz, input.texCoord0, -globalTime);
#elif HARD_SKINNING
	localPos = hardSkinnedPosition(input.localPos.xyz, input.index);
#elif SOFT_SKINNING
	localPos = softSkinnedPosition(input.localPos.xyz, input.indices, input.weights);
#else
	localPos = input.localPos.xyz;
#endif

#if USE_VERTEX_DISPLACEMENT
	localPos += input.normal * (tex2Dlod(vertexDisplacementMap, vertexDisplacementMapUVSpeed * globalTime + (input.texCoord1 * vertexDisplacementMapUVOffsetScale.zw + vertexDisplacementMapUVOffsetScale.xy), 0.0).r * vertexDisplacementScale * input.color0.r);
#endif

#if VERTEX_VERTICAL_OFFSET
	localPos.z += verticalOffset * input.offsetWeight;
#endif

#if INSTANCED_CHAIN
	localPos.yz += chunkOffset;

	const float2 p0 = getChainPoint(instanceId + 1);
	const float2 p1 = getChainPoint(instanceId + 2);

	float2 segmentDir = p1 - p0;
	float segmentLength = length(segmentDir);
	segmentDir *= 1.0 / segmentLength;

	const float2 segmentNormal = float2(-segmentDir.y, segmentDir.x);

	const float2 prevPoint = getChainPoint(instanceId);
	const float2 prevDir = normalize(p0 - prevPoint);
	const float2 prevNormal = float2(-prevDir.y, prevDir.x);
	const float prevMod = getModificationFactor(normalize(prevNormal + segmentNormal), segmentNormal);

	const float2 nextPoint = getChainPoint(instanceId + 3);
	const float2 nextDir = normalize(nextPoint - p1);
	const float2 nextNormal = float2(-nextDir.y, nextDir.x);
	const float nextMod = getModificationFactor(segmentNormal, normalize(segmentNormal + nextNormal));

	const float signY = sign(localPos.y) * 0.5;
	const float blendDir = step(abs(localPos.y), chunkLength * 0.5 - 0.001);
	const float2 sideDir = (0.5 - signY) * prevDir + (signY * nextDir);

	localPos.y *= segmentLength * (1.0 / chunkLength);
	localPos.y -= (signY * prevMod - prevMod) * localPos.z + (signY * nextMod * localPos.z);
	localPos.yz = p0 * 0.5 + (p1 * 0.5 + rotate(localPos.yz, segmentDir));

	segmentDir += (segmentDir * 0.5 + (sideDir - segmentDir)) * blendDir;
#endif

#if NEEDS_LOCAL_POSITION
	float3 displacePos = input.localPos.xyz;

	#if INSTANCED_CHAIN
		displacePos = localPos;
	#endif
#endif

float3 worldPos = mul3Fast1(localPos, worldMatrix);

#if !DRAW_DEPTH_ONLY
	float3 camPos = cameraPosition;
	float3 eyePos = mul3Fast1(localPos, worldViewMatrix);
#endif

output.localPos = mul4Fast1(localPos, worldViewProjMatrix);
output.projPos = output.localPos;

#if FORCE_2D_MODE
	output.localPos.z = 0.0;
#endif
