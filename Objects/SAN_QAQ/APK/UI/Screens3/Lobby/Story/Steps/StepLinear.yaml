Header:
    version: 115
Prototypes:
-   class: "UIControl"
    name: "StepLinear"
    pivot: [0.500000, 0.500000]
    input: false
    components:
        UIAnimationComponent:
            animations: "_INIT,~res:/UI/Screens3/Lobby/Story/Steps/StepLinearOnInit.animation"
        Anchor:
            hCenterAnchorEnabled: true
            vCenterAnchorEnabled: true
        SizePolicy:
            horizontalPolicy: "PercentOfFirstChild"
            verticalPolicy: "PercentOfFirstChild"
        UIDataParamsComponent:
            params:
            - ["StoryStepViewModel", "model", "null", "{ \"step\" = { \"rewards\" = [ { \"type\" = ResourceType.premium; \"stuff\" = { \"quantity\" = 100500; }; }; { \"type\" = ResourceType.gold; \"basic\" = { \"quantity\" = 1000; }; }; { \"type\" = ResourceType.premium; \"basic\" = { \"quantity\" = 86400; }; }; ]; \"repeats\" = { \"quantity\" = 10; }; \"isFinished\" = false; }; \"isHighlighted\" = true; \"isSelected\" = true; }"]
            - ["StoryStepModel", "inProgressStep", "null", "{ }"]
            - ["int", "mainRewardIndex", "0", "0"]
            - ["string", "bgImage", "\"\"", "\"~res:/Gfx/Lobby/events/event_2020-indep_steps/event_2020-indep_step_1\""]
            - ["float", "maximumProgress", "0.000000", "151.000000 / 256.000000"]
            - ["int", "leftAnchor", "0", "0"]
            events:
            - "SHOW_STEP_INFO(int id)"
            - "SELECT_STEP(int id)"
        UIDataLocalVarsComponent:
            data:
            - ["float", "offset", "0.000000"]
            - ["float", "opacity", "0.000000"]
        UIDataLocalBindingsComponent:
            data:
            - ["int", "inProgressStepNetPrice", "when not isNull(inProgressStep) and inProgressStep.net.price.Contains(inProgressStep.price[0].stuff.name) -> inProgressStep.net.price[inProgressStep.price[0].stuff.name].stuff.quantity, 0"]
            - ["int", "inProgressStepPrice", "when not isNull(inProgressStep) and not inProgressStep.price.Empty() -> inProgressStep.price[0].stuff.quantity, 0"]
            - ["float", "inProgressStepProgress", "when (inProgressStepPrice - inProgressStepNetPrice) > 0 -> (float(inProgressStepPrice - inProgressStepNetPrice) / float(inProgressStepPrice)), 0.000000"]
            - ["float", "progressValue", "when isNull(inProgressStep) or inProgressStep.id > model.step.id -> maximumProgress, inProgressStep.id == model.step.id -> inProgressStepProgress * maximumProgress, 0.000000"]
            - ["bool", "isRepeatable", "model.step.repeats.quantity > 1 or model.step.repeats.isInfinite"]
            - ["bool", "showRepeats", "model.step.repeats.quantity > 1 and not model.step.isFinished"]
            - ["string", "repeatsLeft", "when not model.step.repeats.isInfinite and isRepeatable -> str(model.step.repeats.quantity - model.step.repeats.timesCompleted), \"\""]
        UIActionComponent:
            actionsPath: "~res:/UI/Screens3/Lobby/Story/Steps/StepLinear.actions"
        UIEventOnDataComponent0:
            watchedDataExpression: "model.isSelected"
            ifExpression: "model.isSelected"
            eventName: "HIGHLIGHT"
            eventData: "0.200000"
        UIEventOnDataComponent1:
            watchedDataExpression: "model.isSelected"
            ifExpression: "not model.isSelected"
            eventName: "LOWLIGHT"
            eventData: "0.200000"
    children:
    -   class: "UIControl"
        name: "Control"
        input: false
        components:
            Anchor:
                leftAnchorEnabled: true
            SizePolicy:
                horizontalPolicy: "PercentOfFirstChild"
                verticalPolicy: "PercentOfFirstChild"
        bindings:
        - ["Anchor.leftAnchor", "leftAnchor"]
        children:
        -   class: "UIControl"
            name: "ContentWrapper"
            input: false
            components:
                SizePolicy:
                    horizontalPolicy: "PercentOfFirstChild"
                    verticalPolicy: "PercentOfFirstChild"
                UIChildComponent0:
                    prototypePath: "~res:/UI/Screens3/Lobby/Story/Steps/StepLinearDecorator.yaml"
                    args:
                        "content": "Content"
                        "isSelected": "model.isSelected"
                        "offset": "offset"
                        "opacity": "opacity"
                    eventActions:
                    - ["ON_TOUCH_ENTERED", "UNCUT", "_event.time"]
                    - ["ON_TOUCH_EXITED", "CUT", "_event.time"]
                    - ["ON_TOUCH_DOWN", "UNCUT", "_event.time"]
                    - ["ON_CLICK_BUTTON", "ON_STEP_CLICKED", "model.step.id"]
        -   class: "UIControl"
            name: "Header"
            input: false
            components:
                Anchor:
                    hCenterAnchorEnabled: true
                    topAnchorEnabled: true
                    topAnchor: -30.000000
                SizePolicy:
                    horizontalPolicy: "PercentOfMaxChild"
                    verticalPolicy: "PercentOfMaxChild"
            children:
            -   class: "UIControl"
                name: "Id"
                input: false
                classes: "t-body bold not-localize"
                components:
                    UITextComponent: {}
                    Anchor:
                        hCenterAnchorEnabled: true
                        vCenterAnchorEnabled: true
                    SizePolicy:
                        horizontalPolicy: "PercentOfContent"
                        verticalPolicy: "PercentOfContent"
                    StyleSheet:
                        styles: "~res:/UI/Screens3/Font.style.yaml"
                bindings:
                - ["visible", "not isRepeatable"]
                - ["UITextComponent.text", "model.step.id"]
            -   class: "UIControl"
                name: "Infinity"
                input: false
                components:
                    UITextureComponent:
                        spritePath: "~res:/Gfx/Lobby/icons/icon_repetable-step_s"
                    Anchor:
                        hCenterAnchorEnabled: true
                        vCenterAnchorEnabled: true
                    SizePolicy:
                        horizontalPolicy: "PercentOfContent"
                        verticalPolicy: "PercentOfContent"
                bindings:
                - ["visible", "isRepeatable"]
        -   class: "UIControl"
            name: "RepeatsWrapper"
            input: false
            components:
                Anchor:
                    hCenterAnchorEnabled: true
                    bottomAnchorEnabled: true
                    bottomAnchor: -28.000000
                LinearLayout:
                    spacing: 6.000000
                    useRtl: true
                SizePolicy:
                    horizontalPolicy: "PercentOfChildrenSum"
                    verticalPolicy: "PercentOfMaxChild"
            bindings:
            - ["visible", "isRepeatable and showRepeats"]
            children:
            -   class: "UIControl"
                name: "Description"
                input: false
                classes: "t-body regular"
                components:
                    UIOpacityComponent:
                        opacity: 0.750000
                    UITextComponent:
                        text: "Story/LinearStep/RepeatsLeft/Description"
                    SizePolicy:
                        horizontalPolicy: "PercentOfContent"
                        verticalPolicy: "PercentOfContent"
                    StyleSheet:
                        styles: "~res:/UI/Screens3/Font.style.yaml"
            -   class: "UIControl"
                name: "RepeatsLeft"
                input: false
                classes: "t-body bold not-localize"
                components:
                    UITextComponent: {}
                    SizePolicy:
                        horizontalPolicy: "PercentOfContent"
                        verticalPolicy: "PercentOfContent"
                    StyleSheet:
                        styles: "~res:/UI/Screens3/Font.style.yaml"
                bindings:
                - ["UITextComponent.text", "repeatsLeft"]
Slots:
-   class: "UIControl"
    name: "Content"
    input: false
    components:
        SizePolicy:
            horizontalPolicy: "PercentOfFirstChild"
            verticalPolicy: "PercentOfFirstChild"
    children:
    -   class: "UIControl"
        name: "bg"
        input: false
        components:
            UIOpacityComponent: {}
            UITextureComponent:
                materialPath: "~res:/Materials.custom/2d.Textured.HSV.material"
                drawType: "DRAW_SCALE_PROPORTIONAL_ONE"
            Anchor:
                hCenterAnchorEnabled: true
            SizePolicy:
                horizontalPolicy: "PercentOfContent"
                verticalPolicy: "PercentOfContent"
        bindings:
        - ["UIOpacityComponent.opacity", "when not model.step.isFinished -> 0.500000, 1.000000"]
        - ["UITextureComponent.spritePath", "bgImage"]
        - ["UITextureComponent.materialParams", "\"progress,\" + str(progressValue) + \"; hue,0; saturation,0; value,-70\""]
    -   class: "UIControl"
        name: "MainRewardWrapper"
        input: false
        components:
            Anchor:
                leftAnchorEnabled: true
                leftAnchor: 8.000000
                rightAnchorEnabled: true
                rightAnchor: 8.000000
                vCenterAnchorEnabled: true
            SizePolicy:
                horizontalPolicy: "PercentOfParent"
                verticalPolicy: "PercentOfLastChild"
        bindings:
        - ["visible", "not model.step.isFinished"]
        children:
        -   class: "UIControl"
            name: "FxWrapper"
            input: false
            components:
                Anchor:
                    topAnchorEnabled: true
                SizePolicy:
                    horizontalPolicy: "PercentOfParent"
                    verticalPolicy: "FixedSize"
                    verticalValue: 96.000000
            bindings:
            - ["visible", "model.step.net.price.Empty()"]
            children:
            -   class: "UIParticles"
                name: "Fx"
                scale: [2.000000, 2.000000]
                pivot: [0.500000, 0.500000]
                input: false
                effectPath: "~res:/3d/FX/UI/BattlePass/GlowReward.sc2"
                autoStart: true
                components:
                    Anchor:
                        hCenterAnchorEnabled: true
                        vCenterAnchorEnabled: true
        -   class: "UIControl"
            name: "MainRewardHolder"
            input: false
            components:
                SizePolicy:
                    horizontalPolicy: "PercentOfParent"
                    verticalPolicy: "FixedSize"
                    verticalValue: 120.000000
                UIChildComponent0:
                    childType: "kPrototype"
                    condition: "not model.step.isFinished and not model.step.rewards.Empty() and model.step.rewards.Size() > mainRewardIndex"
                    prototypePath: "~res:/UI/Screens3/Lobby/Story/Steps/StepLinearMainReward.yaml"
                    args:
                        "reward": "model.step.rewards[mainRewardIndex]"
    -   class: "UIControl"
        name: "OtherRewards"
        input: false
        components:
            Anchor:
                hCenterAnchorEnabled: true
                bottomAnchorEnabled: true
                bottomAnchor: 16.000000
            LinearLayout:
                orientation: "TopDown"
            SizePolicy:
                horizontalPolicy: "PercentOfMaxChild"
                verticalPolicy: "PercentOfChildrenSum"
            UIRepeatComponent:
                control: "~res:/UI/Screens3/Lobby/Common/Resource/CurrencyAdapter.yaml"
                dataContainer: "model.step.rewards"
                args:
                    "resource": "when _index != mainRewardIndex -> _item, null"
                    "currencySize": "eCurrencySize.HUGE_PROXY"
                    "shortTime": "true"
        bindings:
        - ["visible", "not model.step.isFinished"]
    -   class: "UIControl"
        name: "InfoIcon"
        input: false
        classes: "white-wild-sand-50-bg"
        components:
            Background:
                drawType: "DRAW_ALIGNED"
                sprite: "~res:/Gfx/Lobby/icons/icon_info_xs"
            UIOpacityComponent: {}
            Anchor:
                rightAnchorEnabled: true
                rightAnchor: 8.000000
                topAnchorEnabled: true
                topAnchor: 8.000000
            SizePolicy:
                horizontalPolicy: "PercentOfContent"
                verticalPolicy: "PercentOfContent"
            StyleSheet:
                styles: "~res:/UI/Screens3/Color.style.yaml"
        bindings:
        - ["UIOpacityComponent.opacity", "opacity"]
